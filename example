// package.json
{
  "name": "wompi-chatbot-nestjs",
  "version": "1.0.0",
  "description": "Chatbot para soporte de Wompi con NestJS",
  "scripts": {
    "build": "nest build",
    "format": "prettier --write \"src/**/*.ts\" \"test/**/*.ts\"",
    "start": "nest start",
    "start:dev": "nest start --watch",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/main",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./test/jest-e2e.json"
  },
  "dependencies": {
    "@nestjs/common": "^10.2.0",
    "@nestjs/core": "^10.2.0",
    "@nestjs/platform-express": "^10.2.0",
    "@nestjs/config": "^3.1.0",
    "@nestjs/swagger": "^7.1.0",
    "@pinecone-database/pinecone": "^1.1.0",
    "chromadb": "^1.7.0",
    "openai": "^4.20.0",
    "langchain": "^0.0.208",
    "@langchain/openai": "^0.0.14",
    "@langchain/community": "^0.0.25",
    "cheerio": "^1.0.0-rc.12",
    "axios": "^1.6.0",
    "class-validator": "^0.14.0",
    "class-transformer": "^0.5.1",
    "uuid": "^9.0.1",
    "reflect-metadata": "^0.1.13",
    "rxjs": "^7.8.1"
  },
  "devDependencies": {
    "@nestjs/cli": "^10.2.0",
    "@nestjs/schematics": "^10.0.0",
    "@nestjs/testing": "^10.2.0",
    "@types/express": "^4.17.17",
    "@types/jest": "^29.5.2",
    "@types/node": "^20.3.1",
    "@types/supertest": "^2.0.12",
    "@types/uuid": "^9.0.7",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "eslint": "^8.42.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.0",
    "jest": "^29.5.0",
    "prettier": "^3.0.0",
    "source-map-support": "^0.5.21",
    "supertest": "^6.3.3",
    "ts-jest": "^29.1.0",
    "ts-loader": "^9.4.3",
    "ts-node": "^10.9.1",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.1.3"
  }
}

// .env
/*
OPENAI_API_KEY=tu_api_key_aqui
PINECONE_API_KEY=tu_pinecone_key_aqui
PINECONE_ENVIRONMENT=us-west1-gcp-free
NODE_ENV=development
PORT=3000
*/

// src/config/configuration.ts
export default () => ({
  port: parseInt(process.env.PORT, 10) || 3000,
  openai: {
    apiKey: process.env.OPENAI_API_KEY,
  },
  pinecone: {
    apiKey: process.env.PINECONE_API_KEY,
    environment: process.env.PINECONE_ENVIRONMENT || 'us-west1-gcp-free',
  },
  chroma: {
    persistDirectory: './chroma_db',
  },
  database: {
    host: process.env.DATABASE_HOST,
    port: parseInt(process.env.DATABASE_PORT, 10) || 5432,
  },
});

// src/types/document.interface.ts
export interface DocumentMetadata {
  source: string;
  type?: string;
  [key: string]: any;
}

export interface ChatDocument {
  pageContent: string;
  metadata: DocumentMetadata;
}

export interface ChatSession {
  sessionId: string;
  messages: ChatMessage[];
  createdAt: Date;
  updatedAt: Date;
}

export interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

// src/dto/chat.dto.ts
import { IsString, IsOptional, IsUUID } from 'class-validator';
import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';

export class ChatRequestDto {
  @ApiProperty({
    description: 'Mensaje del usuario',
    example: '¿Cuáles son las comisiones de Wompi?',
  })
  @IsString()
  message: string;

  @ApiPropertyOptional({
    description: 'ID de sesión para mantener contexto',
    example: 'f47ac10b-58cc-4372-a567-0e02b2c3d479',
  })
  @IsOptional()
  @IsUUID()
  sessionId?: string;
}

export class SourceDocument {
  @ApiProperty()
  content: string;

  @ApiProperty()
  source: string;
}

export class ChatResponseDto {
  @ApiProperty()
  sessionId: string;

  @ApiProperty()
  answer: string;

  @ApiProperty({ type: [SourceDocument] })
  sourceDocuments: SourceDocument[];

  @ApiProperty()
  success: boolean;

  @ApiPropertyOptional()
  error?: string;
}

// src/services/data-loader.service.ts
import { Injectable, Logger } from '@nestjs/common';
import { CheerioWebBaseLoader } from 'langchain/document_loaders/web/cheerio';
import { RecursiveCharacterTextSplitter } from 'langchain/text_splitter';
import { Document } from 'langchain/document';

@Injectable()
export class DataLoaderService {
  private readonly logger = new Logger(DataLoaderService.name);

  private readonly wompiUrls = [
    'https://docs.wompi.co/docs/api-reference',
    'https://docs.wompi.co/docs/que-es-wompi',
    'https://docs.wompi.co/docs/integracion-checkout',
    'https://docs.wompi.co/docs/api-de-transacciones',
    'https://docs.wompi.co/docs/webhooks',
  ];

  private readonly manualData = [
    {
      content: `
        Wompi es una pasarela de pagos colombiana que permite a los comerciantes 
        recibir pagos en línea de forma segura. Fundada en 2018, Wompi ofrece:
        
        - Pagos con tarjetas de crédito y débito
        - PSE (Pagos Seguros en Línea)
        - Corresponsales bancarios como Efecty
        - Pagos con QR
        - Suscripciones y pagos recurrentes
        
        Comisiones principales:
        - Tarjetas de crédito: 3.4% + $900 COP
        - Tarjetas de débito: 2.95% + $900 COP
        - PSE: 0.95% + $900 COP
        - Efecty: 3.5% + $900 COP
      `,
      metadata: { source: 'wompi_overview', type: 'general_info' },
    },
    {
      content: `
        Errores comunes en Wompi y sus soluciones:
        
        1. Error 401 - No autorizado:
           - Verificar que el API key sea correcto
           - Confirmar que se esté usando el entorno correcto (sandbox/production)
        
        2. Error 422 - Datos inválidos:
           - Revisar formato de campos obligatorios
           - Verificar que el monto esté en centavos
           - Confirmar formato de email y teléfono
        
        3. Webhook no recibido:
           - Verificar que la URL sea accesible públicamente
           - Confirmar que responda con status 200
           - Revisar logs del servidor
        
        4. Transacción rechazada:
           - Verificar fondos suficientes
           - Confirmar datos de tarjeta
           - Revisar límites del comercio
      `,
      metadata: { source: 'wompi_troubleshooting', type: 'errors' },
    },
    {
      content: `
        Código de ejemplo para integrar Wompi con TypeScript:
        
        \`\`\`typescript
        // Crear transacción
        interface WompiTransaction {
          amount_in_cents: number;
          currency: string;
          customer_email: string;
          reference: string;
          customer_data: {
            phone_number: string;
            full_name: string;
          };
        }
        
        const transaction: WompiTransaction = {
          amount_in_cents: 50000, // $500 COP
          currency: "COP",
          customer_email: "cliente@email.com",
          reference: "ORDER-123",
          customer_data: {
            phone_number: "+573001234567",
            full_name: "Juan Pérez"
          }
        };
        
        const response = await fetch('https://production.wompi.co/v1/transactions', {
          method: 'POST',
          headers: {
            'Authorization': 'Bearer pub_prod_tu_public_key',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(transaction)
        });
        \`\`\`
        
        Webhook con NestJS:
        \`\`\`typescript
        @Post('webhook')
        async handleWebhook(@Body() event: any, @Res() res: Response) {
          if (event.event === 'transaction.updated') {
            const transaction = event.data.transaction;
            
            if (transaction.status === 'APPROVED') {
              // Procesar pago exitoso
              console.log('Pago aprobado:', transaction.reference);
            }
          }
          
          res.status(200).send('OK');
        }
        \`\`\`
      `,
      metadata: { source: 'wompi_code_examples', type: 'integration' },
    },
  ];

  async loadWebData(): Promise<Document[]> {
    try {
      this.logger.log('Cargando datos web de Wompi...');
      const documents: Document[] = [];

      for (const url of this.wompiUrls) {
        try {
          const loader = new CheerioWebBaseLoader(url);
          const docs = await loader.load();
          documents.push(...docs);
          this.logger.log(`Cargado: ${url}`);
        } catch (error) {
          this.logger.warn(`Error cargando ${url}: ${error.message}`);
        }
      }

      return documents;
    } catch (error) {
      this.logger.error('Error cargando datos web:', error);
      return [];
    }
  }

  loadManualData(): Document[] {
    const documents: Document[] = [];
    
    for (const data of this.manualData) {
      const doc = new Document({
        pageContent: data.content,
        metadata: data.metadata,
      });
      documents.push(doc);
    }

    return documents;
  }

  async loadAllData(): Promise<Document[]> {
    const allDocs: Document[] = [];

    // Cargar datos web
    const webDocs = await this.loadWebData();
    allDocs.push(...webDocs);

    // Cargar datos manuales
    const manualDocs = this.loadManualData();
    allDocs.push(...manualDocs);

    this.logger.log(`Total documentos cargados: ${allDocs.length}`);
    return allDocs;
  }

  splitDocuments(documents: Document[]): Document[] {
    const textSplitter = new RecursiveCharacterTextSplitter({
      chunkSize: 1000,
      chunkOverlap: 200,
    });

    return textSplitter.splitDocuments(documents);
  }
}

// src/services/vector-store.service.ts
import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { OpenAIEmbeddings } from '@langchain/openai';
import { Chroma } from '@langchain/community/vectorstores/chroma';
import { PineconeStore } from '@langchain/pinecone';
import { Pinecone } from '@pinecone-database/pinecone';
import { Document } from 'langchain/document';

@Injectable()
export class VectorStoreService {
  private readonly logger = new Logger(VectorStoreService.name);
  private vectorStore: Chroma | PineconeStore;
  private embeddings: OpenAIEmbeddings;
  private usePinecone: boolean;

  constructor(private configService: ConfigService) {
    this.usePinecone = false; // Por defecto usar Chroma
    this.embeddings = new OpenAIEmbeddings({
      openAIApiKey: this.configService.get<string>('openai.apiKey'),
    });
  }

  async initialize(usePinecone = false): Promise<void> {
    this.usePinecone = usePinecone;

    if (usePinecone) {
      await this.initializePinecone();
    } else {
      await this.initializeChroma();
    }
  }

  private async initializePinecone(): Promise<void> {
    try {
      const pinecone = new Pinecone({
        apiKey: this.configService.get<string>('pinecone.apiKey'),
      });

      const indexName = 'wompi-chatbot';

      // Verificar si el índice existe
      const indexes = await pinecone.listIndexes();
      const indexExists = indexes.indexes?.some(index => index.name === indexName);

      if (!indexExists) {
        this.logger.log('Creando índice de Pinecone...');
        await pinecone.createIndex({
          name: indexName,
          dimension: 1536,
          metric: 'cosine',
          spec: {
            serverless: {
              cloud: 'aws',
              region: 'us-east-1',
            },
          },
        });
      }

      const index = pinecone.index(indexName);
      this.vectorStore = await PineconeStore.fromExistingIndex(this.embeddings, {
        pineconeIndex: index,
      });

      this.logger.log('Pinecone inicializado exitosamente');
    } catch (error) {
      this.logger.error('Error inicializando Pinecone:', error);
      throw error;
    }
  }

  private async initializeChroma(): Promise<void> {
    try {
      this.vectorStore = new Chroma(this.embeddings, {
        collectionName: 'wompi-docs',
        url: 'http://localhost:8000', // URL del servidor Chroma
      });

      this.logger.log('Chroma inicializado exitosamente');
    } catch (error) {
      this.logger.error('Error inicializando Chroma:', error);
      throw error;
    }
  }

  async addDocuments(documents: Document[]): Promise<void> {
    try {
      this.logger.log(`Indexando ${documents.length} documentos...`);

      if (this.usePinecone) {
        // Para Pinecone
        await PineconeStore.fromDocuments(documents, this.embeddings, {
          pineconeIndex: (this.vectorStore as PineconeStore).pineconeIndex,
        });
      } else {
        // Para Chroma
        await (this.vectorStore as Chroma).addDocuments(documents);
      }

      this.logger.log('Documentos indexados exitosamente');
    } catch (error) {
      this.logger.error('Error indexando documentos:', error);
      throw error;
    }
  }

  async similaritySearch(query: string, k = 4): Promise<Document[]> {
    if (!this.vectorStore) {
      throw new Error('Vector store no inicializado');
    }

    return this.vectorStore.similaritySearch(query, k);
  }

  getRetriever(searchKwargs = { k: 4 }) {
    if (!this.vectorStore) {
      throw new Error('Vector store no inicializado');
    }

    return this.vectorStore.asRetriever(searchKwargs);
  }
}

// src/services/chatbot.service.ts
import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { ChatOpenAI } from '@langchain/openai';
import { ConversationalRetrievalQAChain } from 'langchain/chains';
import { BufferWindowMemory } from 'langchain/memory';
import { PromptTemplate } from '@langchain/core/prompts';
import { VectorStoreService } from './vector-store.service';
import { v4 as uuidv4 } from 'uuid';

export interface ChatResult {
  sessionId: string;
  answer: string;
  sourceDocuments: Array<{
    content: string;
    source: string;
  }>;
  success: boolean;
  error?: string;
}

@Injectable()
export class ChatbotService {
  private readonly logger = new Logger(ChatbotService.name);
  private llm: ChatOpenAI;
  private qaChain: ConversationalRetrievalQAChain;
  private memory: BufferWindowMemory;
  private sessions: Map<string, BufferWindowMemory> = new Map();

  constructor(
    private configService: ConfigService,
    private vectorStoreService: VectorStoreService,
  ) {
    this.initializeLLM();
  }

  private initializeLLM(): void {
    this.llm = new ChatOpenAI({
      modelName: 'gpt-3.5-turbo',
      temperature: 0.1,
      openAIApiKey: this.configService.get<string>('openai.apiKey'),
    });
  }

  async initialize(): Promise<void> {
    try {
      const retriever = this.vectorStoreService.getRetriever();

      // Prompt personalizado para Wompi
      const customPrompt = PromptTemplate.fromTemplate(`
        Eres WompiBot, el asistente oficial de Wompi, la pasarela de pagos colombiana.
        
        INSTRUCCIONES:
        - Responde de manera profesional pero amigable
        - Usa la información del contexto para dar respuestas precisas
        - Si no sabes algo específico, admítelo y sugiere contactar soporte
        - Incluye ejemplos de código cuando sea relevante
        - Menciona comisiones y costos cuando sea apropiado
        
        CONTEXTO: {context}
        
        HISTORIAL DE CONVERSACIÓN: {chat_history}
        
        PREGUNTA DEL USUARIO: {question}
        
        RESPUESTA:
      `);

      // Configurar memoria de conversación
      this.memory = new BufferWindowMemory({
        memoryKey: 'chat_history',
        returnMessages: true,
        k: 5, // Recordar últimas 5 interacciones
      });

      // Crear chain de conversación
      this.qaChain = ConversationalRetrievalQAChain.fromLLM(
        this.llm,
        retriever,
        {
          memory: this.memory,
          returnSourceDocuments: true,
          verbose: true,
        },
      );

      this.logger.log('Chatbot inicializado exitosamente');
    } catch (error) {
      this.logger.error('Error inicializando chatbot:', error);
      throw error;
    }
  }

  async chat(question: string, sessionId?: string): Promise<ChatResult> {
    if (!sessionId) {
      sessionId = uuidv4();
    }

    try {
      // Obtener o crear memoria para la sesión
      let sessionMemory = this.sessions.get(sessionId);
      if (!sessionMemory) {
        sessionMemory = new BufferWindowMemory({
          memoryKey: 'chat_history',
          returnMessages: true,
          k: 5,
        });
        this.sessions.set(sessionId, sessionMemory);
      }

      // Crear chain con memoria de sesión específica
      const retriever = this.vectorStoreService.getRetriever();
      const sessionChain = ConversationalRetrievalQAChain.fromLLM(
        this.llm,
        retriever,
        {
          memory: sessionMemory,
          returnSourceDocuments: true,
        },
      );

      // Obtener respuesta del chain
      const result = await sessionChain.call({
        question,
      });

      return {
        sessionId,
        answer: result.text,
        sourceDocuments: result.sourceDocuments?.map((doc: any) => ({
          content: doc.pageContent.substring(0, 200) + '...',
          source: doc.metadata?.source || 'unknown',
        })) || [],
        success: true,
      };
    } catch (error) {
      this.logger.error('Error en chat:', error);
      return {
        sessionId,
        answer: 'Lo siento, hubo un error procesando tu pregunta. Por favor intenta de nuevo.',
        sourceDocuments: [],
        success: false,
        error: error.message,
      };
    }
  }

  // Limpiar sesiones antiguas
  cleanupSessions(): void {
    // Implementar lógica para limpiar sesiones antiguas
    // Por ejemplo, eliminar sesiones más antiguas de 1 hora
    this.logger.log(`Sesiones activas: ${this.sessions.size}`);
  }
}

// src/controllers/chat.controller.ts
import {
  Controller,
  Post,
  Body,
  Get,
  HttpException,
  HttpStatus,
  Logger,
} from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';
import { ChatbotService } from '../services/chatbot.service';
import { ChatRequestDto, ChatResponseDto } from '../dto/chat.dto';

@ApiTags('chat')
@Controller('chat')
export class ChatController {
  private readonly logger = new Logger(ChatController.name);

  constructor(private readonly chatbotService: ChatbotService) {}

  @Post()
  @ApiOperation({ summary: 'Enviar mensaje al chatbot' })
  @ApiResponse({
    status: 200,
    description: 'Respuesta del chatbot',
    type: ChatResponseDto,
  })
  @ApiResponse({
    status: 500,
    description: 'Error interno del servidor',
  })
  async chat(@Body() chatRequest: ChatRequestDto): Promise<ChatResponseDto> {
    try {
      const result = await this.chatbotService.chat(
        chatRequest.message,
        chatRequest.sessionId,
      );

      return {
        sessionId: result.sessionId,
        answer: result.answer,
        sourceDocuments: result.sourceDocuments,
        success: result.success,
        error: result.error,
      };
    } catch (error) {
      this.logger.error('Error en endpoint de chat:', error);
      throw new HttpException(
        'Error interno del servidor',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }
}

// src/controllers/health.controller.ts
import { Controller, Get } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse } from '@nestjs/swagger';

@ApiTags('health')
@Controller('health')
export class HealthController {
  @Get()
  @ApiOperation({ summary: 'Verificar salud de la aplicación' })
  @ApiResponse({
    status: 200,
    description: 'Estado de salud de la aplicación',
  })
  async healthCheck() {
    return {
      status: 'healthy',
      timestamp: new Date().toISOString(),
      service: 'WompiBot API',
      version: '1.0.0',
    };
  }

  @Get('ready')
  @ApiOperation({ summary: 'Verificar si la aplicación está lista' })
  async readinessCheck() {
    return {
      status: 'ready',
      timestamp: new Date().toISOString(),
    };
  }
}

// src/app.module.ts
import { Module, OnModuleInit } from '@nestjs/common';
import { ConfigModule } from '@nestjs/config';
import { ChatController } from './controllers/chat.controller';
import { HealthController } from './controllers/health.controller';
import { ChatbotService } from './services/chatbot.service';
import { VectorStoreService } from './services/vector-store.service';
import { DataLoaderService } from './services/data-loader.service';
import configuration from './config/configuration';

@Module({
  imports: [
    ConfigModule.forRoot({
      load: [configuration],
      isGlobal: true,
    }),
  ],
  controllers: [ChatController, HealthController],
  providers: [ChatbotService, VectorStoreService, DataLoaderService],
})
export class AppModule implements OnModuleInit {
  constructor(
    private readonly dataLoaderService: DataLoaderService,
    private readonly vectorStoreService: VectorStoreService,
    private readonly chatbotService: ChatbotService,
  ) {}

  async onModuleInit() {
    try {
      console.log('🚀 Inicializando WompiBot...');

      // 1. Cargar datos
      console.log('📄 Cargando documentación de Wompi...');
      const documents = await this.dataLoaderService.loadAllData();
      const splitDocs = this.dataLoaderService.splitDocuments(documents);
      console.log(`✅ Cargados ${splitDocs.length} documentos`);

      // 2. Inicializar vector store
      console.log('🔍 Inicializando vector store...');
      await this.vectorStoreService.initialize(false); // Usar Chroma

      // 3. Indexar documentos
      console.log('📚 Indexando documentos...');
      await this.vectorStoreService.addDocuments(splitDocs);

      // 4. Inicializar chatbot
      console.log('🤖 Inicializando chatbot...');
      await this.chatbotService.initialize();

      console.log('🎉 ¡WompiBot inicializado exitosamente!');
    } catch (error) {
      console.error('❌ Error inicializando WompiBot:', error);
      throw error;
    }
  }
}

// src/main.ts
import { NestFactory } from '@nestjs/core';
import { ValidationPipe } from '@nestjs/common';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);

  // Configurar CORS
  app.enableCors({
    origin: true,
    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS',
    credentials: true,
  });

  // Configurar validación global
  app.useGlobalPipes(
    new ValidationPipe({
      transform: true,
      whitelist: true,
      forbidNonWhitelisted: true,
    }),
  );

  // Configurar Swagger
  const config = new DocumentBuilder()
    .setTitle('WompiBot API')
    .setDescription('API del chatbot para soporte de Wompi')
    .setVersion('1.0')
    .addTag('chat')
    .addTag('health')
    .build();
  
  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api', app, document);

  const port = process.env.PORT || 3000;
  await app.listen(port);
  
  console.log(`🚀 WompiBot API ejecutándose en: http://localhost:${port}`);
  console.log(`📚 Documentación disponible en: http://localhost:${port}/api`);
}

bootstrap();

// nest-cli.json
{
  "$schema": "https://json.schemastore.org/nest-cli",
  "collection": "@nestjs/schematics",
  "sourceRoot": "src",
  "compilerOptions": {
    "deleteOutDir": true
  }
}

// tsconfig.json
{
  "compilerOptions": {
    "module": "commonjs",
    "declaration": true,
    "removeComments": true,
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "allowSyntheticDefaultImports": true,
    "target": "ES2021",
    "sourceMap": true,
    "outDir": "./dist",
    "baseUrl": "./",
    "incremental": true,
    "skipLibCheck": true,
    "strictNullChecks": false,
    "noImplicitAny": false,
    "strictBindCallApply": false,
    "forceConsistentCasingInFileNames": false,
    "noFallthroughCasesInSwitch": false,
    "resolveJsonModule": true
  }
}

// docker-compose.yml (para Chroma local)
version: '3.8'
services:
  chroma:
    image: chromadb/chroma:latest
    ports:
      - "8000:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - CHROMA_DB_IMPL=duckdb+parquet
      - CHROMA_PERSIST_DIRECTORY=/chroma/chroma

  wompi-bot:
    build: .
    ports:
      - "3000:3000"
    depends_on:
      - chroma
    environment:
      - NODE_ENV=production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - .:/app
      - /app/node_modules

volumes:
  chroma_data:

// Dockerfile
FROM node:18-alpine

WORKDIR
